#!/bin/bash

# Place this script in the root of your streaming project

set -euo pipefail

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m' # No Color

# Configuration
readonly SCRIPT_NAME="$(basename "$0")"
readonly PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly ADD_MOVIE_SCRIPT="$PROJECT_DIR/flexget/config/scripts/add_movie.sh"
readonly EXECUTE_TASK_SCRIPT="$PROJECT_DIR/flexget/config/scripts/execute_task.sh"

# Detect shell configuration file
detect_shell_config() {
  local shell_configs=(
    "$HOME/.zshrc"
    "$HOME/.bashrc"
    "$HOME/.bash_profile"
    "$HOME/.profile"
  )

  # First, try to detect current shell
  if [[ -n "${ZSH_VERSION:-}" ]] && [[ -f "$HOME/.zshrc" ]]; then
    echo "$HOME/.zshrc"
    return 0
  elif [[ -n "${BASH_VERSION:-}" ]] && [[ -f "$HOME/.bashrc" ]]; then
    echo "$HOME/.bashrc"
    return 0
  fi

  # If not found, check for existing files
  for config in "${shell_configs[@]}"; do
    if [[ -f "$config" ]]; then
      echo "$config"
      return 0
    fi
  done

  # Default to .zshrc if nothing found
  echo "$HOME/.zshrc"
}

# Logging functions
log_info() {
  echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
  echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
  echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
  echo -e "${RED}[ERROR]${NC} $1"
}

log_header() {
  echo -e "${PURPLE}$1${NC}"
}

# Print header
print_header() {
  echo
  log_header "╔══════════════════════════════════════════════════════════════╗"
  log_header "║                STREAMING CONFIGURATIONS INSTALLER            ║"
  log_header "╚══════════════════════════════════════════════════════════════╝"
  echo
}

# Validate environment
validate_environment() {
  log_info "Validating environment..."

  # Check if add_movie script exists
  if [[ ! -f "$ADD_MOVIE_SCRIPT" ]]; then
    log_error "add_movie.sh not found at: $ADD_MOVIE_SCRIPT"
    return 1
  fi

  if [[ ! -f "$EXECUTE_TASK_SCRIPT" ]]; then
    log_error "execute_task.sh not found at: $EXECUTE_TASK_SCRIPT"
    return 1
  fi

  # Make scripts executable
  chmod +x "$ADD_MOVIE_SCRIPT" 2>/dev/null || true
  chmod +x "$EXECUTE_TASK_SCRIPT" 2>/dev/null || true

  log_success "Environment validation passed"
  return 0
}

# Generate aliases
generate_aliases() {
  local project_dir="$1"

  cat <<EOF
# ===============================================
# FlexGet Movie Management Aliases
# Generated by $SCRIPT_NAME
# Project: $project_dir
# Generated: $(date '+%Y-%m-%d %H:%M:%S')
# ===============================================

# Main movie management command
alias fgamovie='$project_dir/flexget/config/scripts/add_movie.sh'
alias fglmovies='docker compose -f "$project_dir/docker-compose.yml" exec -T flexget flexget movie-list list manual_movies'
alias fgltv='docker compose -f "$project_dir/docker-compose.yml" exec -T flexget flexget series list all'
alias fge='$project_dir/flexget/config/scripts/execute_task.sh'
EOF
}

# Install aliases
install_aliases() {
  local shell_config
  shell_config=$(detect_shell_config)

  log_info "Installing aliases to: $shell_config"

  # Create backup
  if [[ -f "$shell_config" ]]; then
    local backup_file="${shell_config}.backup.$(date +%Y%m%d_%H%M%S)"
    cp "$shell_config" "$backup_file"
    log_info "Backup created: $backup_file"
  fi

  {
    echo ""
    generate_aliases "$PROJECT_DIR"
  } >>"$shell_config"

  log_success "Aliases installed successfully!"

  echo
  log_info "Added aliases:"
  echo -e "${CYAN}  fgamovie <title>      ${NC}- Add movie to download queue"
  echo -e "${CYAN}  fglmovies             ${NC}- Show current movie list"
  echo -e "${CYAN}  fgltv                 ${NC}- Show current tv show list"
  echo -e "${CYAN}  fge                   ${NC}- Execute taks"

  echo
  log_warning "To activate the aliases, run: source $shell_config"
  log_warning "Or restart your terminal"
}

# Main function
main() {
  local action="install"

  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case $1 in
    --install)
      action="install"
      shift
      ;;
    *)
      log_error "Unknown option: $1"
      show_help
      exit 1
      ;;
    esac
  done

  print_header

  case "$action" in
  "install")
    if validate_environment; then
      install_aliases
      echo
      log_info "Next steps:"
      echo "1. Restart your terminal or run: source $(detect_shell_config)"
    fi
    ;;
  *)
    log_error "Invalid action: $action"
    exit 1
    ;;
  esac
}

# Only run main if script is executed directly (not sourced)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
